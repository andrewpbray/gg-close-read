---
format: 
  html:
    theme:
      - sandstone
      - custom.scss
    backgroundcolor: black
    fontcolor: white
---


::::: {.columns .column-page}

:::: {.column width="35%"}

# A Grammar of Graphics

## A close read of a scatterplot

[By Andrew Bray]{style="font-size: .7em"}

:::{}
\
:::

What a lovely graphics this is,

with its three colors

and dots all over the place.

I wonder: how was this made?

::::

:::: {.column width="10%"}
::::

:::: {.column width="55%" style="padding:20px; position:sticky;top:50px;"}

```{r}
#| include: false

library(tidyverse)
library(palmerpenguins)
theme_black = function(base_size = 12, base_family = "") {
 
  theme_grey(base_size = base_size, base_family = base_family) %+replace%
 
    theme(
      # Specify axis options
      axis.line = element_blank(),  
      axis.text.x = element_text(size = base_size*0.8, color = "white", lineheight = 0.9),  
      axis.text.y = element_text(size = base_size*0.8, color = "white", lineheight = 0.9),  
      axis.ticks = element_line(color = "white", size  =  0.2),  
      axis.title.x = element_text(size = base_size, color = "white", margin = margin(0, 10, 0, 0)),  
      axis.title.y = element_text(size = base_size, color = "white", angle = 90, margin = margin(0, 10, 0, 0)),  
      axis.ticks.length = unit(0.3, "lines"),   
      # Specify legend options
      legend.background = element_rect(color = NA, fill = "black"),  
      legend.key = element_rect(color = "white",  fill = "black"),  
      legend.key.size = unit(1.2, "lines"),  
      legend.key.height = NULL,  
      legend.key.width = NULL,      
      legend.text = element_text(size = base_size*0.8, color = "white"),  
      legend.title = element_text(size = base_size*0.8, face = "bold", hjust = 0, color = "white"),  
      legend.position = "right",  
      legend.text.align = NULL,  
      legend.title.align = NULL,  
      legend.direction = "vertical",  
      legend.box = NULL, 
      # Specify panel options
      panel.background = element_rect(fill = "black", color  =  NA),  
      panel.border = element_rect(fill = NA, color = "white"),  
      panel.grid.major = element_line(color = "grey35"),  
      panel.grid.minor = element_line(color = "grey20"),  
      panel.margin = unit(0.5, "lines"),   
      # Specify facetting options
      strip.background = element_rect(fill = "grey30", color = "grey10"),  
      strip.text.x = element_text(size = base_size*0.8, color = "white"),  
      strip.text.y = element_text(size = base_size*0.8, color = "white",angle = -90),  
      # Specify plot options
      plot.background = element_rect(color = "black", fill = "black"),  
      plot.title = element_text(size = base_size*1.2, color = "white"),  
      plot.margin = unit(rep(1, 4), "lines")
 
    )
 
}
```

```{r}
#| echo: false
#| eval: true
#| warning: false

ggplot(penguins, aes(x = bill_length_mm,
                     y = flipper_length_mm,
                     color = species)) +
  geom_point() +
  labs(x = "Bill Length",
       y = "Flipper Length",
       Species = "Species") +
  theme_black()
```
:::::
:::::

::::: {.columns .column-page}
:::: {.column width="35%"}

The one true source.

Here is the aesthetic mapping. In time this will code highlight!

Lorem ipsum dolor sit amet, consectetur adipiscing elit. Ut accumsan rhoncus turpis, id condimentum augue dignissim vel. Suspendisse varius ex nec ligula dictum, vel vestibulum felis bibendum. Cras id mauris posuere, tempus quam at, vehicula eros. Mauris lobortis ante at dapibus blandit. Praesent hendrerit purus quis urna auctor congue. Etiam ut purus mattis, fringilla magna ac, rhoncus enim. Maecenas luctus turpis nisl, sit amet efficitur mauris viverra vel. In dignissim vehicula nunc, vel scelerisque ante. Pellentesque habitant morbi tristique senectus et netus et malesuada fames ac turpis egestas. Nulla ac pulvinar justo. Sed quis felis odio. Aliquam erat volutpat. Duis ornare ligula tincidunt, volutpat erat in, tristique enim. Nullam id neque sed odio consectetur imperdiet. Cras non malesuada enim, eget hendrerit nunc.

Suspendisse at diam a purus dictum bibendum. Sed eu volutpat sem. Interdum et malesuada fames ac ante ipsum primis in faucibus. Pellentesque at porttitor leo. Mauris laoreet nibh arcu, hendrerit posuere quam auctor eget. Quisque vulputate felis et bibendum dapibus. Ut varius in risus nec finibus. Sed vitae nisl in nisl gravida consectetur. Maecenas ac libero non arcu ultricies porta non sit amet lorem.

Cras ac euismod quam. Proin tempor hendrerit ullamcorper. Aliquam eu elementum neque. Nunc purus dui, fringilla quis pretium vitae, accumsan eget massa. Pellentesque dignissim justo nec velit ullamcorper accumsan. Proin ultrices nisi ac convallis varius. Morbi at leo nisl. Nam condimentum quis mi sed ultricies. Sed vel diam dictum, scelerisque enim sit amet, feugiat nibh. Interdum et malesuada fames ac ante ipsum primis in faucibus. Aenean at tortor vel ipsum suscipit porta.
::::

:::: {.column width="10%"}
::::

:::: {.column width="55%" style="padding:20px; position:sticky;top:50px;"}

```{r}
#| include: false

library(tidyverse)
library(palmerpenguins)
```

```{r}
#| echo: true
#| eval: false
#| warning: false

ggplot(penguins, aes(x = bill_length_mm,
                     y = flipper_length_mm,
                     color = species)) +
  geom_point() +
  labs(x = "Bill Length",
       y = "Flipper Length",
       Species = "Species") +
  theme_bw(base_size = 14)
```
:::::
:::::

<!-- ::::: -->

<!-- # Sticky overlays -->

<!-- The other common style is to have some full-width content stick but only cover part of the page. -->

<!-- For this, we'll need a parent to be the start/end of the sticky zone (equivalent to our `.columns` before). In this case, because I've created a heading in the next section, Quarto automatically puts it and the content below it in a `<section>`, so there's no need to add another wrapper. -->

<!-- We'll also need a container for our hero image that has: -->

<!-- * `position:sticky` -->
<!-- * `top: 0` will make it stick once the top of the section hits the top of the screen (so you won't see content sneaking past up the top) -->
<!-- * `background-image: url(...)` loads the image into it, and -->
<!-- * `background-size: cover` appropriately sizes it for all screens -->
<!-- * `height: 60vh` sizes it to 60% of the screen height, leaving 40% for the text underneath. -->
<!--   - (You could set it to `100vh` if you just wanted the content to be the whole jam, but since our sticky content isn't _doing_ anything yet, I think that's a bad idea. You typically want people to see _something_ happening when they scroll!) -->
<!-- * I've also given it Quarto's `.column-screen` class to make it stretch across the screen. -->

<!-- Let's see how it looks! -->

<!-- ## Demo: sticky overlay -->

<!-- ::: {.column-screen style="background-image:url(https://unsplash.com/photos/KPaSCpklCZw/download?ixid=MnwxMjA3fDB8MXxzZWFyY2h8NHx8bGlnaHRob3VzZXxlbnwwfHx8fDE2NTM0OTMzOTE&force=true); background-size: cover; height: 60vh; position: sticky; top: 0; "} -->
<!-- ::: -->

<!-- _(This lighthouse photo is by [Everaldo Coelho](https://unsplash.com/photos/KPaSCpklCZw) on Unsplash!)_ -->

<!-- Lorem ipsum dolor sit amet, consectetur adipiscing elit. Ut accumsan rhoncus turpis, id condimentum augue dignissim vel. Suspendisse varius ex nec ligula dictum, vel vestibulum felis bibendum. Cras id mauris posuere, tempus quam at, vehicula eros. Mauris lobortis ante at dapibus blandit. Praesent hendrerit purus quis urna auctor congue. Etiam ut purus mattis, fringilla magna ac, rhoncus enim. Maecenas luctus turpis nisl, sit amet efficitur mauris viverra vel. In dignissim vehicula nunc, vel scelerisque ante. Pellentesque habitant morbi tristique senectus et netus et malesuada fames ac turpis egestas. Nulla ac pulvinar justo. Sed quis felis odio. Aliquam erat volutpat. Duis ornare ligula tincidunt, volutpat erat in, tristique enim. Nullam id neque sed odio consectetur imperdiet. Cras non malesuada enim, eget hendrerit nunc. -->

<!-- Suspendisse at diam a purus dictum bibendum. Sed eu volutpat sem. Interdum et malesuada fames ac ante ipsum primis in faucibus. Pellentesque at porttitor leo. Mauris laoreet nibh arcu, hendrerit posuere quam auctor eget. Quisque vulputate felis et bibendum dapibus. Ut varius in risus nec finibus. Sed vitae nisl in nisl gravida consectetur. Maecenas ac libero non arcu ultricies porta non sit amet lorem. -->

<!-- Cras ac euismod quam. Proin tempor hendrerit ullamcorper. Aliquam eu elementum neque. Nunc purus dui, fringilla quis pretium vitae, accumsan eget massa. Pellentesque dignissim justo nec velit ullamcorper accumsan. Proin ultrices nisi ac convallis varius. Morbi at leo nisl. Nam condimentum quis mi sed ultricies. Sed vel diam dictum, scelerisque enim sit amet, feugiat nibh. Interdum et malesuada fames ac ante ipsum primis in faucibus. Aenean at tortor vel ipsum suscipit porta. -->

<!-- ## Review -->

<!-- This works great! -->

<!-- Since this is all just CSS and both styles are structured very similarly, you could choose to have _both_ options depending on screen size (so overlay at mobile widths and columns at desktop sizes). -->

<!-- But so far, nothing's _moving_ or _changing_. We'll need some JavaScript for that. -->

<!-- # Using `scrollama.js` -->

<!-- The idea with Scrollama is that it [keeps an eye on our scrolling](https://developer.mozilla.org/en-US/docs/Web/API/Intersection_Observer_API) tells us when targeted objects are visible. -->

<!-- This can achieve a variety of effects---not just the sticky effects we've used above! As well as using sticky patterns, it can draw attention to elements as they scroll in. -->

<!-- This isn't an entirely JS-free endeavour, unfortunately. Once we've imported the library, we still need to: -->

<!-- 1. Use a `setup` function to tell scrollama which elements to target (let's say, anything with the `.step` class) -->
<!-- 2. Give it event handlers: functions that will run when something enters or exits. -->
<!--   - We need to define two event handlers; one for elements entering the view (`onStepEnter`) and another for them leaving the view (`onStepExit`). -->
<!--   - To start, let's keep it simple(r) and have them just apply or remove a CSS class, `.is-active`. (We'll add some CSS style to make them purple when they have this class!) -->

<!-- # Demo: A flashy series of boxes -->

<!-- ```{ojs} -->
<!-- //| output: false -->

<!-- // import and instantiate the scrollama -->
<!-- scrollama = require("scrollama@3.1.1") -->
<!-- scroller = scrollama(); -->

<!-- // initialise the library and pass event handlers to  -->
<!-- scroller -->
<!--   .setup({ -->
<!--     step: ".step", -->
<!--   }) -->
<!--   .onStepEnter((response) => { -->
<!--     // the box is passed to this function so we can change it! -->
<!--     console.log("Enter triggered") -->
<!--     console.log(response) -->
<!--     // { element, index, direction } -->
<!--     response.element.classList.add("is-active"); -->

<!--   }) -->
<!--   .onStepExit((response) => { -->
<!--     console.log("Exit triggered") -->
<!--     console.log(response) -->
<!--     // { element, index, direction } -->
<!--     response.element.classList.remove("is-active"); -->
<!--   }); -->
<!-- ``` -->

<!-- ```{=html} -->
<!-- <style> -->
<!-- #columnscroller .step { -->
<!--   background-color: #ccc; -->
<!--   color: black; -->
<!--   height: 200px; -->
<!--   text-align: center; -->
<!--   padding: 20px; -->
<!--   transition: background-color 0.5s, color 0.5s, transform 0.5s; -->
<!-- } -->

<!-- /* here's how each box will look as we scroll past it */ -->
<!-- #columnscroller .step.is-active { -->
<!--   background-color: #5500cc; -->
<!--   color: white; -->
<!--   transform: rotate(1.25deg) scale(1.05); -->
<!-- } -->
<!-- </style> -->
<!-- ``` -->

<!-- :::: {#columnscroller} -->

<!-- ::: {.step style="margin-bottom: 100px;"} -->
<!-- Here's our first box! -->
<!-- ::: -->

<!-- ::: {.step style="margin-bottom: 100px;"} -->
<!-- And our second box! -->
<!-- ::: -->

<!-- ::: {.step} -->
<!-- And a third, I guess. -->
<!-- ::: -->

<!-- :::: -->

<!-- ## Review -->

<!-- This works nicely! -->

<!-- If you open your browser's developer tools (Cmd+Opt+I on a Mac or Ctrl+Alt+I on Windows) and go to the Console pane, you can see it log the `response `object every time one of our event handlers fires (because an element scrolls into or out of view). Those are the `console.log` functions above. -->

<!-- The `response` object that we're printing shows all the information we get when these event handlers fire.That includes not just the element being targeted, but also its index (TODO - is this its DOM order compared to similarly targeted things?) and the direction (`"up"` or `"down"`) by which it's exiting. -->

<!-- You could theoretically use these event handlers, `onStepEnter` and `onStepExit`, to do anything. You could have the boxes being detected be invisible, for example, and just use them as trigger points - the actual thing being modified could be sticky and sitting at the top. -->

<!-- TODO - Let's see how well that works with our two-column example from before. -->
